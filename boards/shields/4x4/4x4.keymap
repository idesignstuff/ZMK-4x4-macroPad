/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

/* Key Position Groups

#define KEYS_L 0 1 2 3 4 10 11 12 13 14 20 21 22  // left-hand keys
#define KEYS_R 5 6 7 8 9 15 16 17 18 19 23 24 25  // right-hand keys
#define THUMBS 26 27 28 29                        // thumb keys
 */
 
/* Behavior Settings */

&sl { release-after-ms = <250>; };

&lt {
    tapping-term-ms = <240>;
    quick-tap-ms = <150>;
    require-prior-idle-ms = <10>;
    flavor = "tap-preferred";
};

&mt {
    tapping-term-ms = <250>;
    require-prior-idle-ms = <250>;
    flavor = "tap-preferred";
};

&soft_off {
    hold-time-ms = <5000>; // Only turn off it the key is held for 5 seconds or longer.
};

&sk {
    quick-release;
    release-after-ms = <600>;
};

/ {
    behaviors {
        dotcol: dot_col {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COL";
            bindings = <&kp PERIOD>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comsem: comma_semicolon {
            compatible = "zmk,behavior-mod-morph";
            label = "COM_SEM";
            bindings = <&kp COMMA>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        shiftcap: shiftcap {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFTCAP";
            #binding-cells = <0>;
            bindings = <&sk LEFT_SHIFT>, <&caps_word>;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos {
        compatible = "zmk,combos";

        /*                KEY POSITIONS

             0   1   2   3   
             4   5   6   7
             8   9  10  11  
            12  13  14  15
            */
            
        /* Letters */

        v {
            key-positions = <1 2>;
            bindings = <&kp V>;
        };

        qu {
            key-positions = <2 3>;
            bindings = <&qu>;
        };

        z {
            key-positions = <20 21>;
            bindings = <&kp Z>;
        };

        q {
            bindings = <&kp Q>;
            key-positions = <22 21>;
        };

        /* Brackets */

        lbkt {
            key-positions = <2 12>;
            bindings = <&kp LBKT>;
        };

        rbkt {
            key-positions = <7 17>;
            bindings = <&kp RBKT>;
        };

        lpar {
            key-positions = <3 13>;
            bindings = <&kp LPAR>;
        };

        rpar {
            key-positions = <6 16>;
            bindings = <&kp RPAR>;
        };

        lbrc {
            key-positions = <1 11>;
            bindings = <&kp LBRC>;
        };

        rbrc {
            key-positions = <18 8>;
            bindings = <&kp RBRC>;
        };

        /* Convenience */

        fwslah {
            bindings = <&kp SLASH>;
            key-positions = <24 25>;
        };

        bkslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <23 24>;
        };

        apos {
            bindings = <&kp APOS>;
            key-positions = <8 7>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <6 7>;
        };

        off {
            bindings = <&soft_off>;
            key-positions = <25 24 23>;
        };

        boot {
            bindings = <&bootloader>;
            key-positions = <22 21 20>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <11 12 13>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <16 18 17>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <13 11>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <16 18>;
        };

        less {
            bindings = <&kp LESS_THAN>;
            key-positions = <4 14>;
        };

        more {
            bindings = <&kp GREATER_THAN>;
            key-positions = <5 15>;
        };

        shiftl {
            bindings = <&sk LEFT_SHIFT>;
            key-positions = <13 12>;
        };

        shiftr {
            bindings = <&sk RIGHT_SHIFT>;
            key-positions = <16 17>;
        };

        capsword {
            bindings = <&caps_word>;
            key-positions = <13 16>;
        };

        playpause {
            bindings = <&kp C_PLAY_PAUSE>;
            key-positions = <5 15>;
            layers = <3 1>;
        };
    };

    macros {
        qu: qu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Q &kp U>;
            label = "QU";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp Z             &kp M               &kp K           &kp F           
&kp T             &kp W               &kp ENTER       &kp DEL
&kp I             &kp K               &kp R           &kp QUESTION
&kp TAB           &kp M               &comsem         &dotcol
                       >;
        };
    };
};
